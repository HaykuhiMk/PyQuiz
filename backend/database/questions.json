[
    {
        "id": 0,
        "question": "What will be the output of the following code?",
        "code": "ls = [1, 2, 3]\nls[0] = 'hello'\nls[4] = 4\nprint(ls)",
        "options": [
            "['hello', 2, 3, 4]",
            "['hello', 2, 3, 0, 4]",
            "'list' object does not support item assignment.",
            "list assignment index out of range.",
            "'=' not supported between instances of 'int' and 'str'."
        ],
        "answer": "list assignment index out of range.",
        "difficulty": "easy",
        "topics": ["Lists", "Indexing", "Mutable"],
        "explanation": "Lists in Python are mutable, meaning their elements can be changed. However, attempting to assign a value to an index that is out of range (like `ls[4]` when the list has only 3 elements) raises an 'IndexError'."
    },
    {
        "id": 1,
        "question": "What will be the output of the following code?",
        "code": "tp = ('hello', 1, 2, 3, 'spam')\ntp[0] = 0\ntp[4] = 4\nprint(tp)",
        "options": [
            "0, 1, 2, 3, 4",
            "'tuple' object does not support item assignment.",
            "Tuple assignment index out of range.",
            "'=' not supported between instances of 'str' and 'int'.",
            "Nothing"
        ],
        "answer": "'tuple' object does not support item assignment.",
        "difficulty": "easy",
        "topics": ["Tuples", "Immutable", "Data Structures"],
        "explanation": "Tuples in Python are immutable, meaning their elements cannot be changed after creation. Attempting to modify a tuple's elements using index assignment results in a 'TypeError'."
    },    
    {
        "id": 2,
        "question": "What will be the output of the following code?",
        "code": "words = ['Python', 'Java', 'C++']\nfor word in words:\n\tprint(word[0])",
        "options": [
            "Python Python Python",
            "P J C",
            "Error",
            "Nothing"
        ],
        "answer": "P J C",
        "difficulty": "easy",
        "topics": ["Lists", "Strings", "Loops", "String Indexing", "Iteration"],
        "explanation": "The loop iterates through the list of words, and 'word[0]' accesses the first character of each string. Therefore, 'P', 'J', and 'C' are printed on separate lines."
    },
    {
        "id": 3,
        "question": "What will be the output of the following code?",
        "code": "for x in 'spam':\n\tprint(x)",
        "options": [
            "NameError: name 'x' is not defined.",
            "true true true true",
            "spam spam spam spam",
            "s p a m",
            "s sp spa spam",
            "The result will be an endless print of 'spam'.",
            "Nothing"
        ],
        "answer": "s p a m",
        "difficulty": "easy",
        "topics": ["Strings", "Loops", "String Iteration"],
        "explanation": "The for-loop iterates over each character in the string 'spam'. Since strings are iterable in Python, each character ('s', 'p', 'a', 'm') is printed on a new line."
    },
    {
        "id": 4,
        "question": "What will be the output of the following code?",
        "code": "x = 10\nif x > '5':\n\tprint('x is greater than 5')\nelse:\n\tprint('x is less than or equal to 5')",
        "options": [
            "Nothing",
            "x is less than or equal to 5",
            "Type error",
            "x is greater than 5"
        ],
        "answer": "Type error",
        "difficulty": "easy",
        "topics": ["Integer", "String", "Comparison Operators", "Data Types"],
        "explanation": "The comparison `x > '5'` raises a `TypeError` because `x` is an integer and '5' is a string. In Python, different data types cannot be directly compared using relational operators like `>`."
    },
    {
        "id": 5,
        "question": "What will be the output of the following code?",
        "code": "str1 = 'hello'\nstr2 = 'World'\nstr2 += '!'\nstr3 = 'H' + str1[1:]\nstr1 = str3 + ' ' + str2\nstr1[len(str1)] = '.'\nprint(str1)",
        "options": [
            "Hello World!",
            "Hello World.",
            "'str' object does not support item assignment",
            "unsupported operand type(s) for +: 'str' and 'str'",
            "Nothing"
        ],
        "answer": "'str' object does not support item assignment",
        "difficulty": "medium",
        "topics": ["Strings", "Immutable", "String Concatenation"],
        "explanation": "Strings in Python are immutable, meaning their elements cannot be modified after creation. The attempt to assign `str1[len(str1)] = '.'` results in a `TypeError` because item assignment is not allowed for strings."
    },
    {
        "id": 6,
        "question": "What will be the output of the following code?",
        "code": "for i in range(1, 7):\n\tif i == 3:\n\t\tcontinue\n\tprint(i, ' ')\n\tif (i == 5):\n\t\tbreak",
        "options": [
            "1 2 4",
            "1 2 4 5",
            "1 2",
            "1 2 3 4 5",
            "Error",
            "Nothing"
        ],
        "answer": "1 2 4 5",
        "difficulty": "easy",
        "topics": ["Loops", "Control Statements", "Break Statement", "Continue Statement"],
        "explanation": "The `continue` statement skips the iteration when `i == 3`, so 3 is not printed. The `break` statement stops the loop when `i == 5`, so the loop does not reach 6. Thus, the output is `1 2 4 5`."
    },
    {
        "id": 7,
        "question": "What will be the output of the following code?",
        "code": "ls = [7, 1, 4, 1, 3, 3, 3, 5]\ns = set(ls)\nprint(s)",
        "options": [
            "Error",
            "1, 2, 3, 1, 3, 3, 4, 5",
            "1, 2, 3, 4, 5",
            "1, 2, 4, 5, 7",
            "\"12313345\""
        ],
        "answer": "{1, 3, 4, 5, 7}",
        "difficulty": "easy",
        "topics": ["Sets", "Data Structures", "Duplicate Removal"],
        "explanation": "The `set` function removes duplicate values from the list, leaving `{1, 3, 4, 5, 7}`. Sets are unordered, so the exact order may vary when printed."
    },
    {
        "id": 8,
        "question": "What will be the output of the following code?",
        "code": "x = 17\ny = 20\nstr1 = str(x) + str(y)\nstr2 = str(x + y)\nstr3 = str(x + True)\nprint(str1, ' ', str2, ' ', str3)",
        "options": [
            "37 37 True",
            "37 1720 True",
            "1720 37 18",
            "1720 1720 True",
            "unsupported operand type(s) for +: 'str' and 'str'",
            "unsupported operand type(s) for +: 'str' and 'bool'",
            "unsupported operand type(s) for +: 'int' and 'bool'",
            "Nothing"
        ],
        "answer": "1720  37  18",
        "difficulty": "medium",
        "topics": ["Bool", "Strings", "String Concatenation", "Type Conversion", "Boolean in Arithmetic"],
        "explanation": "1Ô∏è‚É£ `str1 = str(17) + str(20)` results in `'1720'` due to string concatenation.\n2Ô∏è‚É£ `str2 = str(17 + 20)` evaluates `37` first, then converts to `'37'`.\n3Ô∏è‚É£ `str3 = str(17 + True)` treats `True` as `1`, so `17 + 1 = 18`.\nThus, output: `'1720  37  18'`."
    },    
    {
        "id": 9,
        "question": "What will be the output of the following code?",
        "code": "l1 = [1, 2, 3]\nl2 = l1\nl2[0] = 5\nprint(l1, l2)",
        "options": [
            "[1, 2, 3] [5, 2, 3]",
            "[1, 2, 3] [1, 2, 3]",
            "[5, 2, 3] [5, 2, 3]",
            "'list' object does not support item assignment.",
            "Nothing"
        ],
        "answer": "[5, 2, 3] [5, 2, 3]",
        "difficulty": "easy",
        "topics": ["Lists", "Mutable", "List References", "Memory Management"],
        "explanation": "üìå `l2 = l1` creates a reference, not a copy. Both variables point to the same list.\nüìå `l2[0] = 5` modifies the original list since lists are mutable.\nüìå Therefore, both `l1` and `l2` print `[5, 2, 3]`, showing that they share the same memory."
    },
    {
        "id": 10,
        "question": "What will be the output of the following code?",
        "code": "import sys\nl1 = [1, 2, 3]\nl2 = l1\nl3 = [1, 2, 3]\nprint(sys.getrefcount(l3), sys.getrefcount(l1))\nprint(l1 == l2, l1 == l3, l1 is l2, l1 is l3)\nx = 42\ny = 42\nprint(x == y, x is y)",
        "options": [
            "3 3 True True True False True True",
            "2 3 True False True False True False",
            "2 3 True True True False True True",
            "2 3 True True True True True True",
            "3 3 True True True True True True",
            "3 3 True False True False True False",
            "Nothing",
            "Error"
        ],
        "answer": "2 3 True True True False True True",
        "difficulty": "medium",
        "topics": ["Lists", "Reference Counting", "Identity", "Equality", "Immutable", "Mutable", "Memory Management"],
        "explanation": "üìå `sys.getrefcount(obj)` returns the reference count of an object.\nüìå `l1 = [1, 2, 3]` and `l2 = l1` share the same reference, so `l1` has more references than `l3`.\nüìå `l1 == l2` and `l1 == l3` check equality (same values), while `l1 is l2` and `l1 is l3` check identity (same object).\nüìå `x = 42; y = 42`: Small integers (from -5 to 256) are interned, so `x is y` evaluates to `True`."
    },
    {
        "id": 11,
        "question": "What will be the output of the following code?",
        "code": "l1 = [1, [8, 7, 6], 3, 4, 5]\nprint(len(l1))",
        "options": [
            "7",
            "6",
            "5",
            "28",
            "Nothing",
            "Error"
        ],
        "answer": "5",
        "difficulty": "easy",
        "topics": ["Lists", "Nested Lists", "len"],
        "explanation": "üìå `len(l1)` counts the number of top-level elements in the list.\nüìå The list `l1` has 5 elements: `1`, `[8, 7, 6]`, `3`, `4`, and `5`.\nüìå Even though `[8, 7, 6]` contains 3 elements, it's treated as one element in `l1`.\nüìå So, `len(l1) = 5`."
    },
    {
        "id": 12,
        "question": "What will be the output of the following code?",
        "code": "list = [10, 20, 30, 40, 50]\nfor i in list:\n\tif not (i == 30):\n\t\tprint(i, end=' ')\n\tif i > 40:\n\t\tbreak",
        "options": [
            "30",
            "10 20 40",
            "10 20 40 50",
            "10 20 30 40",
            "10 20 30 40 50",
            "Nothing",
            "Error"
        ],
        "answer": "10 20 40 50",
        "difficulty": "easy",
        "topics": ["Lists","Loops", "Conditional Statements", "Break Statement"],
        "explanation": "üìå The loop iterates over `[10, 20, 30, 40, 50]`.\nüìå If condition: `if not (i == 30)` skips printing `30`.\nüìå Break condition: `if i > 40` breaks after printing `50`.\nüìå Final output: `10 20 40 50`."
    },
    {
        "id": 13,
        "question": "What will be the output of the following code?",
        "code": "lst = [7, 8, 9, 10, 11]\nfor i in lst:\n\tif i % 3 == 0:\n\t\tcontinue\n\telif i == 10:\n\t\tbreak\n\telse:\n\t\tprint(i, end=' ')",
        "options": [
            "7 8",
            "7 8 9",
            "7 8 11",
            "7 8 9 10",
            "7 8 10 11",
            "Nothing",
            "Error"
        ],
        "answer": "7 8",
        "difficulty": "medium",
        "topics": ["Lists", "Loops", "Continue Statement", "Break Statement", "Modulo Operator"],
        "explanation": "üìå The loop iterates over `[7, 8, 9, 10, 11]`.\nüìå `if i % 3 == 0` (i.e., `9` is skipped using `continue`).\nüìå `if i == 10:` stops the loop using `break`.\nüìå Printed values: `7 8`."
    },
    {
        "id": 14,
        "question": "What will be the output of the following code?",
        "code": "for i in range(1, 6):\n\tsquare = i ** 2\n\tprint(square)\n\tif square == 9:\n\t\tbreak",
        "options": [
            "1 4 9",
            "1 2 3 4 5",
            "1 2 3 4 5 6",
            "1 4 9 16 25",
            "1 4 9 16 25 36",
            "Nothing",
            "Error"
        ],
        "answer": "1 4 9",
        "difficulty": "easy",
        "topics": ["Integers", "Loops", "Break Statement", "Exponentiation Operator"],
        "explanation": "üìå The loop iterates over `range(1, 6)`, computing `square = i ** 2`.\nüìå The squares calculated are `1, 4, 9, 16, 25`.\nüìå When `square == 9`, the `break` statement stops the loop.\nüìå Printed values: `1 4 9`."
    },    
    {
        "id": 15,
        "question": "What will be the output of the following code?",
        "code": "list = [1]\nlist1 = list \nlist1 = list1 * 5 \nprint(list, list1)",
        "options": [
            "5 5",
            "1 5",
            "[1] [1, 1, 1, 1, 1]",
            "[1, 1, 1, 1, 1] [1, 1, 1, 1, 1]",
            "'*' not supported between instances of 'str' and 'int'.",
            "Nothing"
        ],
        "answer": "[1] [1, 1, 1, 1, 1]",
        "difficulty": "easy",
        "topics": ["Lists", "Assignment", "List Multiplication"],
        "explanation": "üìå `list = [1]` creates a list containing a single element: `[1]`.\nüìå `list1 = list` assigns `list1` as a reference to `list`.\nüìå `list1 = list1 * 5` creates a new list, repeating the contents 5 times, but does not modify `list`.\nüìå Final output: `list` remains `[1]`, while `list1` becomes `[1, 1, 1, 1, 1]`."
    },    
    {
        "id": 16,
        "question": "What will be the output of the following code?",
        "code": "list = [1, 2, 3, 4, 5]\nlist1 = list\nlist[1:4] = [6, 7, 8]\nlist1[1:3] = []\nprint(list, list1)",
        "options": [
            "[1, 8, 5] [1, 8, 5]",
            "[1, 6, 7, 8, 5] [1, 4, 5]",
            "[1, 6, 7, 8, 5] [1, 6, 7, 8, 5]",
            "[1, 2, 3, 4, 5] [1, 2, 3, 4, 5]",
            "Nothing",
            "Error"
        ],
        "answer": "[1, 8, 5] [1, 8, 5]",
        "difficulty": "medium",
        "topics": ["Lists", "Slicing", "Mutability", "Aliasing"],
        "explanation": "üìå `list = [1, 2, 3, 4, 5]` initializes a list.\nüìå `list1 = list` makes `list1` refer to the same list in memory (not a copy).\nüìå `list[1:4] = [6, 7, 8]` replaces elements at indices 1 to 3 with `[6, 7, 8]`, updating `list` to `[1, 6, 7, 8, 5]`.\nüìå `list1[1:3] = []` removes elements at indices 1 and 2, modifying `list1` to `[1, 8, 5]`.\nüìå Since `list1` and `list` refer to the same object, the changes affect both.\nüìå Final output: `[1, 8, 5] [1, 8, 5]`."
    },    
    {
        "id": 17,
        "question": "What will be the output of the following code?",
        "code": "di = dict(a=1, b=2, c=3)\ndiKeys = di.keys()\nprint(diKeys[0])",
        "options": [
            "1",
            "a",
            "{a : 1}",
            "(1, 2, 3)",
            "(a, b, c)",
            "'dict_keys' object does not support indexing.",
            "'tuple' object does not support item assignment",
            "Nothing"
        ],
        "answer": "'dict_keys' object does not support indexing.'",
        "difficulty": "easy",
        "topics": ["Dictionaries", "dict_keys", "Indexing", "Iteration"],
        "explanation": "üìå `di = dict(a=1, b=2, c=3)` creates a dictionary `{ 'a': 1, 'b': 2, 'c': 3 }`.\nüìå `diKeys = di.keys()` returns a `dict_keys` view object, which behaves like a set, not a list.\nüìå Attempting `diKeys[0]` raises a TypeError because `dict_keys` does not support indexing.\nüìå To access elements, convert to a list: `list(di.keys())[0]` ‚Üí `'a'`."
    },    
    {
        "id": 18,
        "question": "What will be the output of the following code?",
        "code": "var = str.maketrans('be', 'do')\nprint(type(var), end=' | ')\ntext = 'be good'\ntranslated_text = text.translate(var)\nprint(translated_text)",
        "options": [
            "<class 'str'> | de good",
            "<class 'dict'> | bo good",
            "<class 'str'> | be good",
            "<class 'list'> | be good",
            "<class 'dict'> | do good",
            "<class 'tuple'> | be good",
            "Nothing",
            "Error"
        ],
        "answer": "<class 'dict'> | do good",
        "difficulty": "hard",
        "topics": ["Strings", "String Translation", "maketrans", "translate", "Dictionaries"],
        "explanation": "üìå `str.maketrans('be', 'do')` creates a translation dictionary `{98: 100, 101: 111}` where 'b' (ASCII 98) maps to 'd' (ASCII 100) and 'e' (ASCII 101) maps to 'o' (ASCII 111).\nüìå `type(var)` prints `<class 'dict'>` because `str.maketrans()` returns a dictionary.\nüìå `text.translate(var)` replaces 'b' ‚Üí 'd' and 'e' ‚Üí 'o', so `'be good'` becomes `'do good'`."
    },    
    {
        "id": 19,
        "question": "What will be the output of the following code?",
        "code": "text = '~~~Hello___World~~~'\ntext = text.removesuffix('~')\ntext = text.removeprefix('~')\ntext = text.strip('_')\nprint(text)",
        "options": [
            "Hello_ _ _World",
            "HelloWorld",
            "Hello_ _World",
            "~~HelloWorld~~",
            "~~Hello_ _ _World~~",
            "~Hello_ _World~",
            "Error",
            "Nothing"
        ],
        "answer": "~~Hello_ _ _World~~",
        "difficulty": "medium",
        "topics": ["Strings", "strip", "removeprefix", "removesuffix"],
        "explanation": "üìå `text.removesuffix('~')` removes only the trailing tildes, reducing it to `'~~~Hello___World'`.\nüìå `text.removeprefix('~')` removes only the leading tilde, leaving `'~~Hello___World'`.\nüìå `text.strip('_')` removes leading and trailing underscores, but there are none at the edges, so `'~~Hello___World~~'` remains unchanged."
    },
    {
        "id": 20,
        "question": "What will be the output of the following code?",
        "code": "words = ['Python', 'C++', 'Java', 'JavaScript']\nfor i in range(0, len(words)) :\n\twords[i] =  words[i].swapcase()\nwords.sort(key=len, reverse=True,)\nprint(words)",
        "options": [
            "['javascript', 'python', 'java', 'c++']",
            "['c++', 'jAVA', 'pYTHON', 'jAVAsCRIPT']",
            "['C++', 'Java', 'Python', 'JavaScript']",
            "['jAVAsCRIPT', 'pYTHON', 'jAVA', 'c++']",
            "['JAVAsCRIPT', 'PYTHON', 'JAVA', 'C++']",
            "Syntax Error",
            "'str' object does not support item assignment",
            "Nothing"
        ],
        "answer": "['jAVAsCRIPT', 'pYTHON', 'jAVA', 'c++']",
        "difficulty": "medium",
        "topics": ["Strings", "swapcase", "Sorting with key function"],
        "explanation": "üìå `swapcase()` converts lowercase to uppercase and vice versa, so:\n  - 'Python' ‚Üí 'pYTHON'\n  - 'C++' ‚Üí 'c++'\n  - 'Java' ‚Üí 'jAVA'\n  - 'JavaScript' ‚Üí 'jAVAsCRIPT'\nüìå `sort(key=len, reverse=True)` sorts the list by length in descending order, so 'jAVAsCRIPT' (10) comes first, followed by 'pYTHON' (6), 'jAVA' (4), and 'c++' (3)."
    },    
    {
        "id": 21,
        "question": "What will be the output of the following code?",
        "code": "ls = [123, 43, 5748, 4532, 43, 88]\nprint(sorted(set(ls), reverse=True))",
        "options": [
            "False",
            "True",
            "[5748, 4532, 123, 88, 43]",
            "[43, 88, 123, 4532, 5748]",
            "[43, 43, 88, 123, 4532, 5748]",
            "[5748, 4532, 123, 88, 43, 43]",
            "Nothing",
            "Error"
        ],
        "answer": "[5748, 4532, 123, 88, 43]",
        "difficulty": "easy",
        "topics": ["Sorting", "Sets", "List Manipulation"],
        "explanation": "üìå `set(ls)` removes duplicates, so the list becomes `{123, 43, 5748, 4532, 88}`.\nüìå `sorted(set(ls), reverse=True)` sorts the elements in descending order: `[5748, 4532, 123, 88, 43]`."
    },
    {
        "id": 22,
        "question": "What will be the output of the following code?",
        "code": "words = ['Python', 'C++', 'Java', 'JavaScript', 'C#', 'Swift', 'Kotlin']\nprint(words[1::3], end = ' | ')\nprint(words[:-3:-1], end = ' | ')\nprint(words[-1:-5:-3])",
        "options": [
            "['Python', 'C++', 'Java] | ['C#', 'Swift', 'Kotlin'] | ['Kotlin', 'JavaScript']",
            "['C++', 'Java'] | ['Kotlin', 'Swift'] | ['Kotlin', 'JavaScript']",
            "['C++', 'C#'] | ['Kotlin', 'Swift'] | ['Kotlin', 'JavaScript']",
            "['C++', 'Java', 'JavaScript'] | ['Kotlin', 'Swift', 'C#'] | ['Kotlin', 'JavaScript']",
            "Index out of range.",
            "Nothing"
        ],
        "answer": "['C++', 'C#'] | ['Kotlin', 'Swift'] | ['Kotlin', 'JavaScript']",
        "difficulty": "medium",
        "topics": ["Lists", "List Slicing", "Negative Indexing", "Step Values"],
        "explanation": "üìå `words[1::3]` selects every 3rd element starting from index 1 ‚Üí `['C++', 'C#']`.\nüìå `words[:-3:-1]` takes the last two elements in reverse order ‚Üí `['Kotlin', 'Swift']`.\nüìå `words[-1:-5:-3]` starts from the last element and moves backwards in steps of 3 ‚Üí `['Kotlin', 'JavaScript']`."
    },
    {
        "id": 23,
        "question": "What will be the output of the following code?",
        "code": "di = {}\nprint(type(di), end=' | ')\ndi[1] = 1\ndi[2] = 2\ndi['1'] = 1\ndi[3] = 3\ndi['2'] = 1\ndi['2'] = 1\ndi[3] = 3\nprint(len(di))",
        "options": [
            "<class 'dict'> | 7",
            "<class 'set'> | 7",
            "<class 'dict'> | 6",
            "<class 'dict'> | 5",
            "<class 'set'> | 6",
            "<class 'set'> | 5",
            "<class 'set'> | 14",
            "<class 'set'> | 12",
            "<class 'dict'> | 14",
            "<class 'dict'> | 12",
            "Index out of range.",
            "dict indices must be integers or slices, not str.",
            "set indices must be integers or slices, not str.",
            "Nothing"
        ],
        "answer": "<class 'dict'> | 5",
        "difficulty": "medium",
        "topics": ["Dictionaries", "Keys", "Hashing", "String Keys", "Integer Keys"],
        "explanation": "üìå `di` is initialized as an empty dictionary (`{}`).\nüìå Keys `1`, `2`, `'1'`, `3`, and `'2'` are added.\nüìå The key `'2'` is assigned twice, but dictionary keys must be unique, so only the last value remains.\nüìå Similarly, `3` is reassigned, keeping only one occurrence.\nüìå This results in `{1: 1, 2: 2, '1': 1, 3: 3, '2': 1}`.\nüìå The final dictionary has 5 unique keys, so `len(di) = 5`."
    },    
    {
        "id": 24,
        "question": "What will be the output of the following code?",
        "code": "x = int(bool())\ny = bool(int())\nprint(x, y, x + y, x * y)",
        "options": [
            "0 0 0 0",
            "False False False False",
            "False False 0 0",
            "0 0 False False",
            "0 0 False 0",
            "0 0 0 False",
            "0 False 0 0",
            "False 0 0 0",
            "Nothing",
            "Error"
        ],
        "answer": "0 False 0 0",
        "difficulty": "easy",
        "topics": ["Bool", "Integers", "Type Conversion", "Boolean Logic", "Integer Operations"],
        "explanation": "üìå `bool()` returns `False`, and `int(False)` is `0`, so `x = 0`.\nüìå `int()` returns `0`, and `bool(0)` is `False`, so `y = False`.\nüìå `x + y = 0 + False = 0` (since `False` is treated as `0` in arithmetic operations).\nüìå `x * y = 0 * False = 0`.\nüìå Final output: `0 False 0 0`."
    },    
    {
        "id": 25,
        "question": "What will be the output of the following code?",
        "code": "x = 123\nfor i in x:\n\tprint(i)",
        "options": [
            "1 2 3",
            "123",
            "'int' object is not iterable.",
            "123 times prints the number 123.",
            "None of the mentioned."
        ],
        "answer": "'int' object is not iterable.",
        "difficulty": "easy",
        "topics": ["Integers", "Loops", "Data Types", "Iteration"],
        "explanation": "üìå In Python, `for i in x` requires `x` to be an iterable (like a list, string, or tuple). \nüìå Since `x` is an `int`, it is not iterable, causing a `TypeError`.\nüìå Correcting this would require converting `x` to a string (`str(x)`) or a list of digits.\nüìå Hence, the error message: `'int' object is not iterable.`"
    },
    {
        "id": 26,
        "question": "What will be the output of the following code?",
        "code": "di = {0: 'a', 1: 'b', 2: 'c'}\nfor i in di:\n\tprint(i, end=' ')",
        "options": [
            "0 1 2",
            "{0: 'a', 1: 'b', 2: 'c'}",
            "'a', 'b', 'c'",
            "Error",
            "Nothing"
        ],
        "answer": "0 1 2",
        "difficulty": "easy",
        "topics": ["Dictionaries", "Iteration", "Loops"],
        "explanation": "üìå When iterating over a dictionary using `for i in di`, the loop iterates over keys by default.\nüìå The keys in `di` are `0, 1, 2`, so they are printed sequentially.\nüìå If you wanted to print values instead, you could use `di.values()`, and for key-value pairs, `di.items()`."
    },    
    {
        "id": 27,
        "question": "What will be the output of the following code?",
        "code": "ls1 = [1, 2]\nls2 = [2]\ns1 = 'Hello'\ns2 = 'Hello'\ns3 = 'Hella'\nset1 = {1, 4, 2, 7, 8}\nset2 = {7, 1, 4, 2}\nx = {}\nprint(ls1 > ls2, s2 is s1, s2 < s3, set1 == set2, isinstance(x, set))",
        "options": [
            "True False False False True",
            "True True False False True",
            "True False True False True",
            "True False False True True",
            "False True False True False",
            "True True False False False",
            "True False False True False",
            "Nothing",
            "Error"
        ],
        "answer": "False True False True False",
        "difficulty": "medium",
        "topics": ["Lists", "Strings", "Sets", "Identity Operators", "Type Checking"],
        "explanation": "üìå `ls1 > ls2` ‚ûù `False`: Lists are compared lexicographically, and `[1, 2] > [2]` is `False` since `1 < 2`.\nüìå `s2 is s1` ‚ûù `True`: String interning in Python makes `s1` and `s2` refer to the same memory location.\nüìå `s2 < s3` ‚ûù `False`: String comparison is based on ASCII values. `'Hello' > 'Hella'` since `o > a`.\nüìå `set1 == set2` ‚ûù `True`: Sets ignore order, and `{1, 4, 2, 7, 8}` is equal to `{7, 1, 4, 2}`.\nüìå `isinstance(x, set)` ‚ûù `False`: `{}` creates an empty dictionary, not a set. An empty set should be created with `set()`."
    },    
    {
        "id": 28,
        "question": "What will be the output of the following code?",
        "code": "di = {0: 'a', 1: 'b', 2: 'c'}\nfor x in di.keys():\n\tprint(di[x], end=' | ')\nprint()",
        "options": [
            "{0: 'a', 1: 'b', 2: 'c'} | {0: 'a', 1: 'b', 2: 'c'} | {0: 'a', 1: 'b', 2: 'c'} |",
            "0 | 1 | 2 |",
            "a | b | c |",
            "{0: 'a', 1: 'b', 2: 'c'} |",
            "KeyError",
            "Nothing"
        ],
        "answer": "a | b | c |",
        "difficulty": "easy",
        "topics": ["Dictionaries", "Loops", "Dictionary Methods"],
        "explanation": "üìå `di.keys()` returns an iterable of dictionary keys: `[0, 1, 2]`. \nüìå Inside the loop, `di[x]` retrieves the corresponding value for each key. \nüìå The output will be `'a' | 'b' | 'c' |'` because values `'a'`, `'b'`, and `'c'` are printed with `end=' | '`. \nüìå The trailing `print()` ensures a newline after execution."
    },    
    {
        "id": 29, 
        "question": "What will be the output of the following code?",
        "code": "di = {0: 'a', 1: 'b', 2: 'c'}\nfor x in di.values():\n\tprint(di[x], end=' | ')\nprint()",
        "options": [
            "{0: 'a', 1: 'b', 2: 'c'} | {0: 'a', 1: 'b', 2: 'c'} | {0: 'a', 1: 'b', 2: 'c'} |",
            "0 | 1 | 2 |",
            "a | b | c |",
            "{0: 'a', 1: 'b', 2: 'c'} |",
            "KeyError",
            "Nothing"
        ],
        "answer": "KeyError",
        "difficulty": "easy",
        "topics": ["Dictionaries", "Loops"],
        "explanation": "üìå `di.values()` returns the dictionary's values: `['a', 'b', 'c']`.\nüìå The loop iterates over these values (`x` takes 'a', 'b', then 'c').\nüìå The error occurs because `di[x]` tries to access `di['a']`, `di['b']`, etc., but 'a', 'b', and 'c' are not keys in `di`.\nüìå Since `di` only has numeric keys (`0, 1, 2`), trying `di['a']` raises a `KeyError`."
    },    
    {
        "id": 30,
        "question": "What will be the output of the following code?",
        "code": "di = {0, 1, 2}\nfor x in di.values():\n\tprint(x, end = ' | ')\nprint()",
        "options": [
            "0 | 1 | 2 |",
            "0 | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 2 | # 3 times",
            "0 | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 2 | 0 | 1 | 2 | # 4 times",
            "Error",
            "Nothing"
        ],
        "answer": "Error",
        "difficulty": "easy",
        "topics": ["Sets", "Dictionaries"],
        "explanation": "üìå The code attempts to call `.values()` on `di`.\nüìå However, `di = {0, 1, 2}` is a set, not a dictionary.\nüìå Sets do not have keys or values, so calling `.values()` on a set raises an AttributeError.\nüìå Fix: If `di` was a dictionary (e.g., `di = {0: 'a', 1: 'b', 2: 'c'}`), `.values()` would work."
    },    
    {
        "id": 31,
        "question": "What will be the output of the following code?",
        "code": "di = {0, 1, 2}\nfor x in di:\n\tprint(di.add(x), end = ' | ')\nprint()",
        "options": [
            "{0, 1, 2}",
            "{0, 1, 2, 0, 1, 2}",
            "None | None | None |",
            "{0, 1, 2, None, None, None}",
            "Error: Set changed size during iteration.",
            "Nothing"
        ],
        "answer": "None | None | None |",
        "difficulty": "medium",
        "topics": ["Sets", "Mutable", "Set Methods"],
        "explanation": "üìå `di` is a set, and `di.add(x)` is used inside the loop.\nüìå `.add(x)` tries to add `x` to `di`, but since `x` is already in the set, nothing changes.\nüìå Important: `.add()` returns `None`, not the modified set.\nüìå The `print(di.add(x))` outputs `None` for each element in `di`."
    },
    {
        "id": 32,
        "question": "What will be the output of the following code?",
        "code": "for i in range(0):\n\tprint(i, end = ' | ')\na = 1; b = 2; print('res = ', a + b)",
        "options": [
            "0 | 1 | res = 3",
            "0 | res = 3",
            "res = 3",
            "Error",
            "Nothing"
        ],
        "answer": "res =  3",
        "difficulty": "easy",
        "topics": ["Integers", "Loops", "Range", "Basic Arithmetic"],
        "explanation": "üìå `range(0)` produces an empty sequence, so the `for` loop does not execute at all.\nüìå The `print(i, end=' | ')` inside the loop never runs because there are no values to iterate over.\nüìå The next lines execute normally: `a + b = 3`, so the output is simply `res =  3`."
    },    
    {
        "id": 33,
        "question": "What will be the output of the following code?",
        "code": "x = 7\ny = 9\nx, y = y, x\na, b, c = 'Bye'\nprint(x, y, a, b, c)",
        "options": [
            "9 7 B y e",
            "7 9 B y e",
            "9 7 Bye Bye Bye",
            "7 9 Bye Bye Bye",
            "Error",
            "Nothing"
        ],
        "answer": "9 7 B y e",
        "difficulty": "easy",
        "topics": ["Tuple Unpacking", "String Unpacking", "Multiple Assignment"],
        "explanation": "üìå `x, y = y, x` swaps `x` and `y`, so now `x = 9` and `y = 7`.\nüìå `a, b, c = 'Bye'` unpacks each character of the string into separate variables: `a = 'B'`, `b = 'y'`, `c = 'e'`.\nüìå The final `print(x, y, a, b, c)` outputs: `9 7 B y e`."
    },    
    {
        "id": 34,
        "question": "What will be the output of the following code?",
        "code": "tp = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nfor a, b, c in tp:\n\tprint(a, b, c,  end=' | ')",
        "options": [
            "1 2 3 | 4 5 6 | 7 8 9 |",
            "1 4 7 | 2 5 8 | 3 6 9 |",
            "Error: too many values to unpack.",
            "Error: not enough values to unpack.",
            "Nothing"
        ],
        "answer": "1 2 3 | 4 5 6 | 7 8 9 |",
        "difficulty": "medium",
        "topics": ["Tuples", "Tuple Unpacking", "For Loop", "Iteration"],
        "explanation": "üìå `tp` is a tuple of tuples, each containing exactly three elements.\nüìå `for a, b, c in tp:` unpacks each inner tuple into `a, b, c`.\nüìå The loop iterates three times, printing each tuple's values in order:\n  - `1 2 3 | 4 5 6 | 7 8 9 |`"
    },    
    {
        "id": 35,
        "question": "What will be the output of the following code?",
        "code": "ls = [['a', 'b'], 'c', 'd']\na, *b = ls\nx, y, z, p = range(4)\nprint(x, y, z, p, a, b)",
        "options": [
            "0 1 2 3 ['a'] ['b', 'c', 'd']",
            "0 1 2 3 ['a', 'b'] ['c', 'd']",
            "0 1 2 3 ['a', 'b', 'c'] ['d']",
            "0 1 2 3 ['a', 'b', 'c', 'd'] None",
            "range(0, 4) range(0, 4) range(0, 4) range(0, 4) ['a'] ['b', 'c', 'd']",
            "range(0, 4) range(0, 4) range(0, 4) range(0, 4) ['a', 'b'] ['c', 'd']",
            "range(0, 4) range(0, 4) range(0, 4) range(0, 4) ['a', 'b', 'c'] ['d']",
            "range(0, 4) range(0, 4) range(0, 4) range(0, 4) ['a', 'b', 'c', 'd'] None",
            "Error: too many values to unpack.",
            "Error: not enough values to unpack.",
            "Nothing"
        ],
        "answer": "0 1 2 3 ['a', 'b'] ['c', 'd']",
        "difficulty": "medium",
        "topics": ["Lists", "List Unpacking", "Range Function", "Extended Unpacking"],
        "explanation": "üìå `ls = [['a', 'b'], 'c', 'd']` is a list with three elements.\nüìå `a, *b = ls` unpacks:\n  - `a = ['a', 'b']` (first element of `ls`)\n  - `b = ['c', 'd']` (remaining elements in a list)\nüìå `x, y, z, p = range(4)` assigns `x = 0`, `y = 1`, `z = 2`, `p = 3`.\nüìå Final output: `0 1 2 3 ['a', 'b'] ['c', 'd']`"
    },    
    {
        "id": 36,
        "question": "What will be the output of the following code?",
        "code": "ls = [['a', 'b'], 'c', 'd']\na, *b, c = range(4)\n*x, y = ls\nprint(a, b, c, '|', x, y)",
        "options": [
            "[0, 1, 2] 3 | [['a', 'b'], 'c'] d",
            "0 [1, 2] 3 | [['a', 'b'], 'c'] d",
            "0 [1, 2, 3] None | [['a', 'b'], 'c'] d",
            "0 [1, 2, 3] None | [['a', 'b'], 'c', 'd'] None",
            "range(0, 4) range(0, 4) range(0, 4) | [['a', 'b'], 'c'] d",
            "range(0, 4) range(0, 4) range(0, 4) | [['a', 'b', 'c'] d",
            "range(0, 4) range(0, 4) range(0, 4) | [['a', 'b'], 'c', 'd'] None",
            "Error: too many values to unpack.",
            "Error: not enough values to unpack.",
            "Nothing"
        ],
        "answer": "0 [1, 2] 3 | [['a', 'b'], 'c'] d",
        "difficulty": "medium",
        "topics": ["Lists", "List Unpacking", "Extended Unpacking", "Range Function"],
        "explanation": "üìå `a, *b, c = range(4)`:\n  - `a = 0` (first value of range)\n  - `b = [1, 2]` (middle values as a list)\n  - `c = 3` (last value of range)\nüìå `*x, y = ls`:\n  - `x = [['a', 'b'], 'c']` (all but the last element)\n  - `y = 'd'` (last element)\nüìå Final output: `0 [1, 2] 3 | [['a', 'b'], 'c'] d`"
    },    
    {
        "id": 37,
        "question": "What will be the output of the following code?",
        "code": "a = b = []\nb.append(42) \nprint(a, b, end=' | ')\nls = [1, 2] \nls1 = ls\nls = ls + [3] \nls.append(4)\nprint(ls, ls1)",
        "options": [
            "[42] [42] | [1, 2, 3, 4] [1, 2, 3, 4]",
            "[42, 42] | [1, 2, 3, 4] [1, 2, 3, 4]",
            "None 42 | [1, 2, 3, 4] [1, 2, 3, 4]",
            "None 42 | [1, 2, 3, 4] [1, 2]",
            "[42, 42] | [1, 2, 3, 4] [1, 2]",
            "[42] [42] | [1, 2, 3, 4] [1, 2]"
        ],
        "answer": "[42] [42] | [1, 2, 3, 4] [1, 2]",
        "difficulty": "medium",
        "topics": ["Lists", "Mutable", "Aliasing", "List Modification"],
        "explanation": "üìå `a = b = []` creates a single empty list referenced by both `a` and `b`.\n  - `b.append(42)` modifies the same list, so `a` also reflects the change.\nüìå `ls = [1, 2]` creates a new list.\n  - `ls1 = ls` makes `ls1` reference the same list.\n  - `ls = ls + [3]` creates a new list and reassigns `ls`, breaking the reference with `ls1`.\n  - `ls.append(4)` modifies the new list, but `ls1` remains unchanged.\nüìå Final output: `[42] [42] | [1, 2, 3, 4] [1, 2]`."
    },    
    {
        "id": 38,
        "question": "What will be the output of the following code?",
        "code": "ls = ['Hi', 7, 8]\nls1 = ls\nls1.append(9) \nls1 = ls1 + 'Bye'\nprint(ls, ls1)",
        "options": [
            "['Hi', 7, 8] ['Hi', 7, 8, 9, 'Bye']",
            "['Hi', 7, 8, 9] ['Hi', 7, 8, 9, 'Bye']",
            "['Hi', 7, 8, 9, 'Bye'] ['Hi', 7, 8, 9, 'Bye']",
            "Error",
            "Nothing"
        ],
        "answer": "Error",
        "difficulty": "medium",
        "topics": ["Lists", "List Modification", "Aliasing"],
        "explanation": "üìå `ls = ['Hi', 7, 8]` creates a list and assigns it to `ls`.\n  - `ls1 = ls` makes `ls1` reference the same list as `ls`.\nüìå `ls1.append(9)` modifies the original list (`ls` also gets modified).\nüìå `ls1 = ls1 + 'Bye'` causes an error because:\n  - `'Bye'` is a string.\n  - `ls1 + 'Bye'` attempts to concatenate a list and a string, which raises a TypeError.\nüìå Since the error occurs before `print(ls, ls1)`, the program crashes and nothing is printed."
    },    
    {
        "id": 39,
        "question": "What will be the output of the following code?",
        "code": "ls = [1, 2, 3]\nls1 = [4, 5]\nls = ls + ls1 + [6, 7] + ['Hi']\nls2 = LS \nprint(ls2)",
        "options": [
            "[1, 2, 3, 4, 5, 6, 7, 'Hi']",
            "[4, 5, 6, 7, 'Hi']",
            "[1, 2, 3]",
            "Error",
            "Nothing"
        ],
        "answer": "Error",
        "difficulty": "easy",
        "topics": ["Lists", "Variable Assignment", "Case Sensitivity"],
        "explanation": "üìå `ls = [1, 2, 3]` creates a list.\nüìå `ls1 = [4, 5]` creates another list.\nüìå `ls = ls + ls1 + [6, 7] + ['Hi']` concatenates all these lists into `ls`.\nüìå `ls2 = LS` causes an error because Python is case-sensitive:\n   - `ls` exists, but `LS` (uppercase) is not defined.\n   - This results in a NameError.\nüìå Since an error occurs before `print(ls2)`, the program crashes and nothing is printed."
    },    
    {
        "id": 40,
        "question": "What will be the output of the following code?",
        "code": "ls = [1, 2, 3]\nls = ls.append(4)\nls1 = [4, 5]\nls = ls + ls1 + ls[1:]\nprint(ls)",
        "options": [
            "[1, 2, 3, 4, 5, 2, 3,]",
            "[1, 2, 3, 4, 5, 2, 3, 4]",
            "[1, 2, 3, 4, 4, 5, 2, 3, 4]",
            "[1, 2, 3, 4, 5, 1, 2, 3, 4]",
            "[1, 2, 3, 4, 4, 5, 1, 2, 3, 4]",
            "Error",
            "Nothing"
        ],
        "answer": "Error",
        "difficulty": "medium",
        "topics": ["Lists", "List Methods", "None"],
        "explanation": "üìå `ls = [1, 2, 3]` creates a list.\nüìå `ls.append(4)` modifies `ls` in place and returns `None`.\nüìå `ls = ls.append(4)` assigns `None` to `ls` instead of the modified list.\nüìå `ls + ls1 + ls[1:]` causes a TypeError:\n   - `ls` is `None`.\n   - `None + ls1` is invalid in Python.\nüìå The program crashes before reaching `print(ls)`, so no output is printed."
    },    
    {
        "id": 41,
        "question": "What will be the output of the following code?",
        "code": "import sys\ntemp = sys.stdout\nsys.stdout = open('log.txt', 'a') \nprint('spam', end=', ')\nprint(1, 2, 3, sep='')\nsys.stdout.close() \nsys.stdout = temp\nprint('back here', end=' | ', sep='_')\nprint(open('log.txt').read())",
        "options": [
            "spam, 1 2 3 | back here",
            "back here | spam, 1 2 3",
            "spam, 123 | back here",
            "back_here | spam, 123",
            "back here | spam, 123",
            "spam, 1 2 3 | back_here",
            "back_here | spam, 1 2 3",
            "spam, 123 | back_here",
            "Error",
            "Nothing"
        ],
        "answer": "back here | spam, 123",
        "difficulty": "hard",
        "topics": ["stdout", "Files", "print"],
        "explanation": "üìå `sys.stdout = open('log.txt', 'a')` redirects print output to `log.txt`.\nüìå `print('spam', end=', ')` writes `spam, ` to `log.txt`.\nüìå `print(1, 2, 3, sep='')` writes `123` to `log.txt`.\nüìå `sys.stdout.close()` closes the file.\nüìå `sys.stdout = temp` restores the original output stream.\nüìå `print('back here', end=' | ', sep='_')` prints `back here | ` to the console.\nüìå `print(open('log.txt').read())` reads and prints `spam, 123` from `log.txt`.\nüìå Final output: `back here | spam, 123`."
    },    
    {
        "id": 42,
        "question": "What will be the output of the following code?",
        "code": "x = 'Python'\nwhile x:\n\tprint(x, end=' ')\n\tx = x[1:]\nres = ['Version 1', 'Version 2'][bool(x)]\nprint(res)",
        "options": [
            "Python Python Python Python Python Python Version 2",
            "Python Python Python Python Python Python Version 1",
            "ython ython ython ython ython ython Version 2",
            "ython ython ython ython ython ython Version 1",
            "Python ython thon hon on n Version 2",
            "Python ython thon hon on n Version 1",
            "Error",
            "Nothing"
        ],
        "answer": "Python ython thon hon on n Version 1",
        "difficulty": "hard",
        "topics": ["Strings", "string slicing", "while loop", "boolean indexing"],
        "explanation": "üìå The `while x:` loop runs as long as `x` is not empty.\nüìå `print(x, end=' ')` prints the current value of `x`.\nüìå `x = x[1:]` removes the first character of `x` in each iteration.\nüìå The loop executes 6 times: `Python`, `ython`, `thon`, `hon`, `on`, `n`.\nüìå When `x` becomes an empty string (`''`), the loop stops.\nüìå `bool(x)` is `False` because `x` is empty (`''` is falsy).\nüìå `res = ['Version 1', 'Version 2'][False]` ‚Üí `res = 'Version 1'`.\nüìå Final output: `Python ython thon hon on n Version 1`."
    },    
    {
        "id": 43,
        "question": "What will be the output of the following code?",
        "code": "di = {'a': 1, 'b': 2, 'c': 3}\nfor x, y in di.items():\n\tprint(x, y, sep=' - ', end=' | ')",
        "options": [
            "Error",
            "a - 1 | b - 2 | c - 3 |",
            "a - b | c - None | None - None |",
            "a - None | b - None | c - None |",
            "Nothing"
        ],
        "answer": "a - 1 | b - 2 | c - 3 |",
        "difficulty": "easy",
        "topics": ["Dictionaries", "Loops", "string formatting"],
        "explanation": "üìå `di.items()` returns key-value pairs from the dictionary.\nüìå The loop `for x, y in di.items():` unpacks key (`x`) and value (`y`).\nüìå `print(x, y, sep=' - ', end=' | ')` prints each key-value pair with `-` separator and `|` as an end character.\nüìå The output is:\n   - `a - 1 |`\n   - `b - 2 |`\n   - `c - 3 |`\nüìå The correct answer is `'a - 1 | b - 2 | c - 3 |'`."
    },    
    {
        "id": 44,
        "question": "What will be the output of the following code?",
        "code": "ls1 = [1,2,3]\nls2 = [5,6,7]\nfor (x, y) in zip(ls1, ls2): print(x, y, '-', x+y, end=' | ')",
        "options": [
            "1 2 - 3 | 3 5 - 8 | 6 7 - 13 | 7 None - None",
            "15 51 - 66 | 26 62 - 88 | 37 73 - 110 |",
            "1 5 - 6 | 2 6 - 8 | 3 7 - 10 |",
            "6 | 8 | 10",
            "Nothing",
            "Error"
        ],
        "answer": "1 5 - 6 | 2 6 - 8 | 3 7 - 10 |",
        "difficulty": "easy",
        "topics": ["Lists", "zip", "Loops", "string formatting"],
        "explanation": "üìå `zip(ls1, ls2)` pairs elements from `ls1` and `ls2`:\n   - (1,5), (2,6), (3,7)\nüìå `for (x, y) in zip(ls1, ls2):` iterates over pairs.\nüìå `print(x, y, '-', x+y, end=' | ')` prints:\n   - `1 5 - 6 | 2 6 - 8 | 3 7 - 10 |`\nüìå The correct answer is `'1 5 - 6 | 2 6 - 8 | 3 7 - 10 |'`."
    },    
    {
        "id": 45,
        "question": "What will be the output of the following code?",
        "code": "def foo(x):\n\treturn x + str(chr(ord(x) + 1))\nst1 = 'abc'\nst2 = 'xyz123'\nprint(list(zip(st1, st2)), end=' | ')\nprint(list(map(foo, st1)))",
        "options": [
            "[('a', 'b'), ('c', 'x'), ('y', 'z')] | ['b', 'c', 'd']",
            "[('a', 'x'), ('b', 'y'), ('c', 'z')] | ['b', 'c', 'd']",
            "[('a', 'x'), ('b', 'y'), ('c', 'z')] | ['ab', 'bc', 'cd']",
            "[('a', 'b'), ('c', 'x'), ('y', 'z')] | ['ab', 'bc', 'cd']",
            "[('a', 'b'), ('c', 'x'), ('y', 'z'), (None, '1'), (None, '2'), (None, '3')] | ['b', 'c', 'd']",
            "[('a', 'x'), ('b', 'y'), ('c', 'z'), (None, '1'), (None, '2'), (None, '3')] | ['b', 'c', 'd']",
            "[('a', 'b'), ('c', 'x'), ('y', 'z'), (None, '1'), (None, '2'), (None, '3')] | ['ab', 'bc', 'cd']",
            "[('a', 'x'), ('b', 'y'), ('c', 'z'), (None, '1'), (None, '2'), (None, '3')] | ['ab', 'bc', 'cd']",
            "Error",
            "Nothing"
        ],
        "answer": "[('a', 'x'), ('b', 'y'), ('c', 'z')] | ['ab', 'bc', 'cd']",
        "difficulty": "medium",
        "topics": ["Tuples", "Lists", "zip", "map", "chr", "ord", "string manipulation"],
        "explanation": "üìå `zip(st1, st2)` pairs elements from `st1` ('abc') and `st2` ('xyz123'), stopping at the shortest sequence.\n   - Output: `[('a', 'x'), ('b', 'y'), ('c', 'z')]`\nüìå `map(foo, st1)` applies `foo(x)` to each character in `st1`:\n   - `foo('a') = 'a' + 'b' ‚Üí 'ab'`\n   - `foo('b') = 'b' + 'c' ‚Üí 'bc'`\n   - `foo('c') = 'c' + 'd' ‚Üí 'cd'`\n   - Output: `['ab', 'bc', 'cd']`\nüìå The correct answer is `'[('a', 'x'), ('b', 'y'), ('c', 'z')] | ['ab', 'bc', 'cd']'`."
    },    
    {
        "id": 46,
        "question": "What will be the output of the following code?",
        "code": "ls = ['Python', 'C++', 'Java', 'JavaScript']\nx = ord(ls[2][1:5:7])\nres = list(enumerate(ls, x))\nprint(res)",
        "options": [
            "[(97, 'Python'), (97, 'C++'), (97, 'Java'), (97, 'JavaScript')]",
            "[(74, 'Python'), (74, 'C++'), (74, 'Java'), (74, 'JavaScript')]",
            "[(0, 'Python'), (0, 'C++'), (0, 'Java'), (0, 'JavaScript')]",
            "[(1, 'Python'), (1, 'C++'), (1, 'Java'), (1, 'JavaScript')]",
            "[(97, 'Python'), (98, 'C++'), (99, 'Java'), (100, 'JavaScript')]",
            "[(0, 'Python'), (1, 'C++'), (2, 'Java'), (3, 'JavaScript')]",
            "[(118, 'Python'), (118, 'C++'), (118, 'Java'), (118, 'JavaScript')]",
            "[(1, 'Python'), (2, 'C++'), (3, 'Java'), (4, 'JavaScript')]",
            "Error",
            "Nothing"
        ],
        "answer": "[(97, 'Python'), (98, 'C++'), (99, 'Java'), (100, 'JavaScript')]",
        "difficulty": "hard",
        "topics": ["Lists", "ord", "string slicing", "enumerate"],
        "explanation": "üìå `ls[2]` is `'Java'`, so `ls[2][1:5:7]` tries to take characters from index `1 to 5 with step 7`. Since the step skips out of range, it only takes `'a'` (index 1).\n   - `ord('a') = 97`\nüìå `enumerate(ls, x)` starts enumeration from `97`, so we get:\n   - `(97, 'Python'), (98, 'C++'), (99, 'Java'), (100, 'JavaScript')`\nüìå The correct answer is `'[(97, 'Python'), (98, 'C++'), (99, 'Java'), (100, 'JavaScript')]'`."
    }    
]




